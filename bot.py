import asyncio
import aiohttp
import logging
from datetime import datetime
from telegram import Bot
from keep_alive import keep_alive

# ---------------- C·∫§U H√åNH ----------------
BOT_TOKEN = "6367532329:AAFUobZTDtBrWWfjXanXHny9mBRN0eHyAGs"
CHAT_ID = -1002666964512
API_URL = "https://sunwinsaygex.onrender.com/api/taixiu/sunwin"
CHECK_INTERVAL = 8  # gi√¢y gi·ªØa m·ªói l·∫ßn ki·ªÉm tra
MAX_RETRY = 5       # s·ªë l·∫ßn th·ª≠ reconnect Telegram
# -------------------------------------------

logging.basicConfig(
    format="%(asctime)s - [%(levelname)s] %(message)s",
    level=logging.INFO
)

bot = Bot(token=BOT_TOKEN)
last_phien = None  # L∆∞u phi√™n cu·ªëi c√πng ƒë√£ g·ª≠i

# ---------------- KEEP ALIVE ----------------
keep_alive()
# --------------------------------------------

async def fetch_data():
    """L·∫•y d·ªØ li·ªáu t·ª´ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL, timeout=10) as resp:
                if resp.status == 200:
                    return await resp.json()
                else:
                    logging.warning(f"‚ö†Ô∏è API l·ªói: {resp.status}")
                    return None
    except Exception as e:
        logging.error(f"‚ùå L·ªói khi fetch API: {e}")
        return None

async def send_message_safe(text):
    """G·ª≠i tin nh·∫Øn Telegram, t·ª± reconnect khi l·ªói"""
    for i in range(MAX_RETRY):
        try:
            await bot.send_message(chat_id=CHAT_ID, text=text, parse_mode="HTML")
            return True
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è G·ª≠i th·∫•t b·∫°i ({i+1}/{MAX_RETRY}): {e}")
            await asyncio.sleep(5)
    logging.error("‚ùå Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn sau nhi·ªÅu l·∫ßn th·ª≠!")
    return False

async def auto_send_result():
    """T·ª± ƒë·ªông g·ª≠i k·∫øt qu·∫£ khi API c√≥ phi√™n m·ªõi"""
    global last_phien

    while True:
        data = await fetch_data()
        if data:
            try:
                phien = data.get("phien")
                du_doan = data.get("du_doan", "Kh√¥ng r√µ")
                ket_qua = data.get("ket_qua", "Ch∆∞a c√≥")

                # N·∫øu c√≥ phi√™n m·ªõi ‚Üí g·ª≠i tin
                if phien and phien != last_phien:
                    last_phien = phien
                    text = (
                        f"üåû <b>Sunwin TX</b>\n"
                        f"üéØ <b>Phi√™n:</b> <code>{phien}</code>\n"
                        f"üß† <b>D·ª± ƒëo√°n:</b> <b>{du_doan}</b>\n"
                        f"üèÅ <b>K·∫øt qu·∫£:</b> <b>{ket_qua}</b>\n"
                        f"‚è∞ <i>{datetime.now().strftime('%H:%M:%S %d/%m/%Y')}</i>"
                    )
                    await send_message_safe(text)
                    logging.info(f"‚úÖ ƒê√£ g·ª≠i k·∫øt qu·∫£ phi√™n {phien}")
            except Exception as e:
                logging.error(f"‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu API: {e}")

        await asyncio.sleep(CHECK_INTERVAL)

async def main():
    """Ch·∫°y bot ch√≠nh ‚Äî auto reconnect n·∫øu c√≥ l·ªói"""
    while True:
        try:
            logging.info("üöÄ Bot Sunwin TX ƒëang kh·ªüi ƒë·ªông...")
            await auto_send_result()
        except Exception as e:
            logging.error(f"üí• L·ªói ch√≠nh: {e}")
            logging.info("üîÅ ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i sau 10s...")
            await asyncio.sleep(10)

if __name__ == "__main__":
    asyncio.run(main())
    
