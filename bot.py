import asyncio, requests, json, os
from datetime import datetime
from collections import deque, Counter
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from keep_alive import keep_alive

# ===== C·∫§U H√åNH =====
BOT_TOKEN = "6367532329:AAFUobZTDtBrWWfjXanXHny9mBRN0eHyAGs"
GROUP_ID = -1002666964512
API_URL = "https://sunwinsaygex.onrender.com/api/taixiu/sunwin"
HISTORY_FILE = "history.json"
TREND_LEN = 10
ALERT_STREAK = 5
ALERT_SPECIAL = 3
WINRATE_THRESHOLD = 70
CHECK_INTERVAL = 5  # gi√¢y ki·ªÉm tra phi√™n m·ªõi
# ===================

# ===== LOAD HISTORY =====
if not os.path.exists(HISTORY_FILE):
    with open(HISTORY_FILE, "w", encoding="utf-8") as f: f.write("[]")

with open(HISTORY_FILE, "r", encoding="utf-8") as f:
    history_all = json.load(f)

history_trend = deque([r["ketqua"] for r in history_all[-TREND_LEN:]], maxlen=TREND_LEN)

# ===== H√ÄM H·ªñ TR·ª¢ =====
def get_data():
    try:
        r = requests.get(API_URL, timeout=10)
        r.raise_for_status()
        d = r.json()
        return d.get("phien","Kh√¥ng r√µ"), d.get("ketqua","Kh√¥ng r√µ")
    except: return None, None

def save(phien, ketqua):
    record = {"phien":phien,"ketqua":ketqua,"time":datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
    history_all.append(record)
    history_trend.append(ketqua)
    with open(HISTORY_FILE,"w",encoding="utf-8") as f:
        json.dump(history_all,f,ensure_ascii=False,indent=2)

def analyze_trend():
    tai = history_trend.count("T√†i")
    xiu = history_trend.count("X·ªâu")
    if len(history_trend)<3: return "üìä Ch∆∞a ƒë·ªß d·ªØ li·ªáu"
    if tai==xiu: return "‚öñÔ∏è Xu h∆∞·ªõng c√¢n b·∫±ng!"
    return f"üî• T√†i {tai}/{len(history_trend)}" if tai>xiu else f"üíß X·ªâu {xiu}/{len(history_trend)}"

def winrate():
    tai = sum(1 for r in history_all if r["ketqua"]=="T√†i")
    xiu = sum(1 for r in history_all if r["ketqua"]=="X·ªâu")
    total = len(history_all)
    if total==0: return "üìä Ch∆∞a c√≥ d·ªØ li·ªáu"
    bar=lambda n,total: "‚ñà"*int(n/total*20)+"‚ñë"*(20-int(n/total*20))
    return f"üèÜ T√†i {tai}/{total} {bar(tai,total)}\nüèÜ X·ªâu {xiu}/{total} {bar(xiu,total)}"

def check_alert():
    last = list(history_trend)[-ALERT_STREAK:]
    if len(last)<ALERT_STREAK: return None
    if all(r=="T√†i" for r in last): return "üî• 5 phi√™n T√†i li√™n ti·∫øp!"
    if all(r=="X·ªâu" for r in last): return "üíß 5 phi√™n X·ªâu li√™n ti·∫øp!"
    return None

def check_special():
    last = list(history_trend)[-ALERT_SPECIAL:]
    if len(last)<ALERT_SPECIAL: return None
    tai = sum(1 for r in history_all if r["ketqua"]=="T√†i")
    xiu = sum(1 for r in history_all if r["ketqua"]=="X·ªâu")
    total = len(history_all)
    if all(r=="T√†i" for r in last) and tai/total*100>=WINRATE_THRESHOLD:
        return "üî•‚ö†Ô∏è 3 T√†i li√™n ti·∫øp + Winrate >70%!"
    if all(r=="X·ªâu" for r in last) and xiu/total*100>=WINRATE_THRESHOLD:
        return "üíß‚ö†Ô∏è 3 X·ªâu li√™n ti·∫øp + Winrate >70%!"
    return None

def predict_next():
    # AI d·ª± ƒëo√°n phi√™n ti·∫øp theo d·ª±a tr√™n t·∫ßn su·∫•t 10 phi√™n g·∫ßn nh·∫•t
    count = Counter(history_trend)
    if not count: return "üìä Ch∆∞a ƒë·ªß d·ªØ li·ªáu"
    return "D·ª± ƒëo√°n phi√™n ti·∫øp theo: T√†i" if count["T√†i"]>count["X·ªâu"] else "D·ª± ƒëo√°n phi√™n ti·∫øp theo: X·ªâu"

def build_msg(phien, ketqua):
    du_doan = "T√†i" if ketqua=="T√†i" else "X·ªâu"
    t = datetime.now().strftime("%H:%M:%S")
    trend = analyze_trend()
    wr = winrate()
    alert = check_alert()
    sp = check_special()
    predict = predict_next()
    msg = f"üåû Sunwin TX\nüïê {t}\nüß© Phi√™n: {phien}\nüéØ K·∫øt qu·∫£: {ketqua}\n\n{trend}\n{wr}\nüìå {predict}"
    if alert: msg += f"\n‚ö†Ô∏è {alert}"
    if sp: msg += f"\n‚ö†Ô∏è {sp}"
    return msg

# ===== L·ªÜNH BOT =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üåû Sunwin TX Bot (AI + Alert)\n‚Ä¢ /taixiu ‚Üí Xem k·∫øt qu·∫£ + xu h∆∞·ªõng + winrate\n‚Ä¢ Bot auto g·ª≠i theo phi√™n m·ªõi ü§ñ",
        parse_mode="Markdown"
    )

async def taixiu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phien, ketqua = get_data()
    if not phien: 
        await update.message.reply_text("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu"); 
        return
    save(phien, ketqua)
    await update.message.reply_text(build_msg(phien, ketqua), parse_mode="Markdown")

# ===== AUTO G·ª¨I THEO PHI√äN =====
async def auto_send_by_phien(app):
    last_phien = history_all[-1]["phien"] if history_all else None
    while True:
        await asyncio.sleep(CHECK_INTERVAL)
        phien, ketqua = get_data()
        if not phien or phien == last_phien: 
            continue
        last_phien = phien
        save(phien, ketqua)
        try:
            await app.bot.send_message(GROUP_ID, build_msg(phien, ketqua), parse_mode="Markdown")
            print(f"[‚úÖ] {phien} ({ketqua}) g·ª≠i th√†nh c√¥ng")
        except Exception as e:
            print(f"[‚ùå] L·ªói g·ª≠i {phien}: {e}")

# ===== CH·∫†Y BOT =====
if __name__=="__main__":
    print("üöÄ Kh·ªüi ƒë·ªông bot Sunwin TX AI + Alert (auto theo phi√™n)...")
    keep_alive()  # Keep-Alive Render
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("taixiu", taixiu))
    asyncio.create_task(auto_send_by_phien(app))  # Auto g·ª≠i theo phi√™n m·ªõi
    app.run_polling()
    
